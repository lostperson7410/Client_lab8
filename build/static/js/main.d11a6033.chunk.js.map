{"version":3,"sources":["Task.js","App.js","serviceWorker.js","config.js","index.js"],"names":["props","task","editTask","deleteTask","id","name","className","onClick","App","useState","setTask","setName","useEffect","retriverData","firestore","collection","onSnapshot","snapshot","console","log","docs","mytask","map","d","data","doc","set","delete","type","onChange","e","target","value","length","style","display","listStyle","index","key","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","apps","initializeApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAGe,G,YAAA,SAAAA,GAAS,IACbC,EAA2BD,EAA3BC,KAAKC,EAAsBF,EAAtBE,SAASC,EAAaH,EAAbG,WACdC,EAAWH,EAAXG,GAAGC,EAAQJ,EAARI,KACd,OACA,4BACE,yBAAKC,UAAU,MACdF,GAED,yBAAKE,UAAU,QACdD,GAEC,yBAAKC,UAAU,aACf,4BAAQA,UAAU,MAAMC,QAAS,kBAAMJ,EAAWC,KAAlD,UACM,4BAAQE,UAAU,OAAOC,QAAS,kBAAKL,EAASE,KAAhD,YC0DKI,MAnEf,WAAe,IAAD,EAGSC,mBAAS,CAC5B,CAAEL,GAAI,EAAEC,KAAK,gBACb,CAAOD,GAAG,EAAEC,KAAK,mBALP,mBAGNJ,EAHM,KAGDS,EAHC,OAQUD,mBAAS,IARnB,mBAQNJ,EARM,KAQDM,EARC,KAYZC,qBAAU,WACRC,MACA,IAEF,IAAMA,EAAe,WACnBC,EAAUC,WAAW,QAAQC,YAAW,SAACC,GACvCC,QAAQC,IAAIF,EAASG,MACrB,IAAIC,EAAQJ,EAASG,KAAKE,KAAI,SAAAC,GAAM,IAAD,EACfA,EAAEC,OAAbpB,EAD0B,EAC1BA,GAAGC,EADuB,EACvBA,KAEV,OADAa,QAAQC,IAAIf,EAAGC,GACT,CAACD,KAAGC,WAEZK,EAAQW,OAuBNnB,EAAW,SAACE,GAChBU,EAAUC,WAAW,QAAQU,IAAIrB,EAAK,IAAIsB,IAAI,CAACtB,KAAGC,UAGhDF,EAAa,SAACC,GAClBU,EAAUC,WAAW,QAAQU,IAAIrB,EAAK,IAAIuB,UAG1C,OACE,6BACE,mCAAQ,6BACR,2BAAOC,KAAK,OAAOvB,KAAK,OAAOwB,SAAU,SAACC,GAAD,OAAMnB,EAAQmB,EAAEC,OAAOC,UAChE,4BAAQzB,QA/BK,WACf,IAAIH,EAAqB,IAAhBH,EAAKgC,OAAc,EAAEhC,EAAKA,EAAKgC,OAAO,GAAG7B,GAAK,EACvDU,EAAUC,WAAW,QAAQU,IAAIrB,EAAG,IAAIsB,IAAI,CAACtB,KAAGC,WA6B9C,OAEE,wBAAI6B,MAAO,CAACC,QAAQ,OAAOC,UAAU,SA1BrCnC,GAAMA,EAAKgC,OAEbhC,EAAKqB,KAAI,SAACrB,EAAKoC,GACb,OACA,kBAAC,EAAD,CAAMC,IAAKD,EAAOpC,KAAMA,EAAME,WAAYA,EAAYD,SAAUA,OAM7D,2CCxCSqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAUiBC,EAVF,CACXC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,sBCRnB,0CAU4B,IAAxBC,IAASC,KAAKrB,QACdoB,IAASE,cAAcX,GAEpB,IAAM9B,EAAYuC,IAASvC,YAClC0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.d11a6033.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Task.css'\r\n\r\nexport default props =>{\r\n    const {task,editTask,deleteTask}= props\r\n    const {id,name} = task\r\nreturn(\r\n<li>\r\n  <div className=\"id\">\r\n  {id}\r\n  </div>\r\n  <div className=\"name\">\r\n  {name}\r\n    </div>\r\n    <div className=\"container\">\r\n    <button className=\"red\" onClick={() => deleteTask(id)}>delete</button>\r\n          <button className=\"blue\" onClick={()=> editTask(id)}>Edit</button>\r\n    </div>\r\n        </li>\r\n)\r\n}","import React, { Component, useState, useEffect } from 'react';\nimport firebase from 'firebase';\nimport {firestore} from './index'\nimport Task from './Task'\n\n\n\nfunction App(){\n  \n\n  const[task,setTask]= useState([\n    { id: 1,name:\"do homewaork\"},\n    {      id:2,name:\"Write node js\"}\n  ])\n  \n  const[name,setName] = useState('')\n\n\n\n  useEffect(() =>{\n    retriverData()\n  },[])\n\n  const retriverData = () => {\n    firestore.collection(\"task\").onSnapshot((snapshot)=>{\n      console.log(snapshot.docs)\n      let mytask =snapshot.docs.map(d => {\n        const {id,name} = d.data()\n        console.log(id,name)\n        return{id,name}\n      })\n      setTask(mytask)\n    })\n  } \n\n  const addTask  = () => {\n    let id =(task.length === 0)?1:task[task.length-1].id + 1\n    firestore.collection(\"task\").doc(id+'').set({id,name})\n  }\n\n\n  const renderTask = () =>{\n    if( task&&task.length)\n    return(\n      task.map((task,index)=>{\n        return(\n        <Task key={index} task={task} deleteTask={deleteTask} editTask={editTask}/>\n         )\n       }\n      )\n    )\n    else\n    return(<li>No Task</li>)\n  }\n  const editTask = (id) => {\n    firestore.collection(\"task\").doc(id + '').set({id,name})\n}\n\nconst deleteTask = (id) =>{\n  firestore.collection(\"task\").doc(id + '').delete()\n}\n\n  return(\n    <div>\n      <h1>Todo<br></br>\n      <input type=\"text\" name=\"name\" onChange={(e)=> setName(e.target.value)}/> \n      <button onClick={addTask}>Add</button>\n\n        <ul style={{display:'flex',listStyle:'none'}}>{renderTask()}</ul>\n      </h1>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config = {\r\n    apiKey: \"AIzaSyAYpRA4jbSnttL_-iC4wy-e5qStoMgOB-Q\",\r\n    authDomain: \"lab8client.firebaseapp.com\",\r\n    databaseURL: \"https://lab8client.firebaseio.com\",\r\n    projectId: \"lab8client\",\r\n    storageBucket: \"lab8client.appspot.com\",\r\n    messagingSenderId: \"680382374914\",\r\n    appId: \"1:680382374914:web:705a640e44357011fd731b\",\r\n    measurementId: \"G-RHG5E221JE\"\r\n  };\r\n  export default config","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport config from './config'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n\nif (firebase.apps.length ===0)\n    firebase.initializeApp(config)\n\nexport const firestore = firebase.firestore()\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}